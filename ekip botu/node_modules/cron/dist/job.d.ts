import { CronTime } from './time';
import { CronJobParams } from './types/cron.types';
export declare class CronJob {
    cronTime: CronTime;
    running: boolean;
    unrefTimeout: boolean;
    lastExecution: Date | null;
    runOnce: boolean;
    context: unknown;
    onComplete?: (...args: any) => void;
    private _timeout?;
    private _callbacks;
    constructor(cronTime: CronJobParams['cronTime'], onTick: CronJobParams['onTick'], onComplete?: CronJobParams['onComplete'], start?: CronJobParams['start'], timeZone?: CronJobParams['timeZone'], context?: CronJobParams['context'], runOnInit?: CronJobParams['runOnInit'], utcOffset?: null, unrefTimeout?: CronJobParams['unrefTimeout']);
    constructor(cronTime: CronJobParams['cronTime'], onTick: CronJobParams['onTick'], onComplete?: CronJobParams['onComplete'], start?: CronJobParams['start'], timeZone?: null, context?: CronJobParams['context'], runOnInit?: CronJobParams['runOnInit'], utcOffset?: CronJobParams['utcOffset'], unrefTimeout?: CronJobParams['unrefTimeout']);
    static from(params: CronJobParams): CronJob;
    private _fnWrap;
    addCallback(callback: (...args: any) => void): void;
    setTime(time: CronTime): void;
    nextDate(): import("luxon").DateTime;
    fireOnTick(): void;
    nextDates(i?: number): import("luxon").DateTime[];
    start(): void;
    lastDate(): Date | null;
    stop(): void;
}
